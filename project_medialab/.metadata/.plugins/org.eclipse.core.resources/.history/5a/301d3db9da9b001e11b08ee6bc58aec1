package application;

import static javafx.geometry.HPos.CENTER;

import java.io.FileNotFoundException;
import java.io.IOException;

import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class InsertBooks {

	    InsertBooks(Stage primaryStage, Admin admin) throws FileNotFoundException, ClassNotFoundException, IOException {
	    	
	        GridPane grid = new GridPane();
	        grid.setAlignment(Pos.CENTER);
	        grid.setHgap(10);
	        grid.setVgap(10);
	        grid.setPadding(new Insets(25, 25, 25, 25));

	        Text scenetitle = new Text("Let's Insert a Book!");
	        scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
	        grid.add(scenetitle, 0, 0, 2, 1);

	        // Set TextFields for each bookProperty
	        TextField titleField = new TextField();
	        TextField authorField = new TextField();
	        TextField publisherField = new TextField();
	        TextField categoryField = new TextField();
	        TextField isbnField = new TextField();
	        TextField yopField = new TextField();
	        TextField copiesField = new TextField();
	        
	        // categoryComboBox's data
	        ComboBox<Category> categoryComboBox = new ComboBox<>(CategoryUtils.getCategories());
	        
	        HBox categoryHBox = new HBox(10);
	        categoryHBox.getChildren().addAll(categoryComboBox, categoryField);

	        // Add Labels and TextFields
	        grid.add(new Label("Title:"), 0, 1);
	        grid.add(titleField, 1, 1);
	        grid.add(new Label("Author:"), 0, 2);
	        grid.add(authorField, 1, 2);
	        grid.add(new Label("Publisher:"), 0, 3);
	        grid.add(publisherField, 1, 3);
	        grid.add(new Label("Category:"), 0, 4);
	        grid.add(categoryHBox, 1, 4);
	        grid.add(new Label("ISBN:"), 0, 5);
	        grid.add(isbnField, 1, 5);
	        grid.add(new Label("YearOfPublishing:"), 0, 6);
	        grid.add(yopField, 1, 6);
	        grid.add(new Label("Copies:"), 0, 7);
	        grid.add(copiesField, 1, 7);

	        // Request focus on the title field by default
	        Platform.runLater(() -> titleField.requestFocus());
	        
	        final Text actiontarget = new Text();
	        grid.add(actiontarget, 1, 9);
	        GridPane.setColumnSpan(actiontarget, 2);
	        GridPane.setHalignment(actiontarget, CENTER);
	        
	        // categoryComboBox
	        categoryComboBox.setOnAction(event -> {
	            String selectedCategory = categoryComboBox.getValue().getTitle();
	            if (selectedCategory != null) {
	                categoryField.setText(selectedCategory);
	            }
	        });
	        
	        // "Insert" button
	        Button insertButton = new Button("Insert");
	        insertButton.setOnAction(event -> {
	        	try {
	        		Category category = new Category(categoryField.getText());
	    	        ObservableList<Category> categories = CategoryUtils.getCategories();

	    	        // If newTitle or newISBN already exist show error message
					if(BookUtils.bookTitleOrISBNExists(titleField.getText(), isbnField.getText())) {
						actiontarget.setText("Title or ISBN already exists!");
						actiontarget.setFill(Color.RED);
					}
					
					// If any of the textFields is empty show error message
					else if(titleField.getText().isEmpty() ||
							authorField.getText().isEmpty() ||
							publisherField.getText().isEmpty() ||
							categoryField.getText().isEmpty() ||
							isbnField.getText().isEmpty() ||
							yopField.getText().isEmpty() ||
							copiesField.getText().isEmpty()
							) 
					{
						actiontarget.setText("There is Empty Field!");
						actiontarget.setFill(Color.RED);
					}
					
					// If newCategoryName is wrong show error message
					else if(!Character.isUpperCase(categoryField.getText().charAt(0))) {
	        			actiontarget.setText("Wrong Category Name!");
						actiontarget.setFill(Color.RED);
	        		}
					
					// If newCategoryName doesn't already exist show error message
	        		else if(!CategoryUtils.categoryAlreadyExists(category, categories)) {
	        			actiontarget.setText("Category doesn't exist!");
						actiontarget.setFill(Color.RED);
	        		}
					
					// Otherwise store newBook
					else {
						Book book = new Book(titleField.getText(), authorField.getText(), publisherField.getText(), categoryField.getText(), isbnField.getText(), yopField.getText(), copiesField.getText());
						book.store();
						new InsertBooks(primaryStage, admin);
					}
				} catch (ClassNotFoundException | IOException e) {
					e.printStackTrace();
				}
	        });
	        
	        // Return to ManageBooksPage if "Cancel" button is clicked
	        Button manageBooksButton = new Button("Cancel");
	        manageBooksButton.setOnAction(event -> {
				try {
					new ManageBooks(primaryStage, admin);
				} catch (ClassNotFoundException | IOException e) {
					e.printStackTrace();
				}
			});

	        HBox hbBtn = new HBox(10);	        
	        hbBtn.setAlignment(Pos.BOTTOM_CENTER);
	        hbBtn.getChildren().addAll(insertButton, manageBooksButton);
	        grid.add(hbBtn, 1, 8);

	        Scene scene = new Scene(grid, 420, 420);
	        primaryStage.setScene(scene);
	        primaryStage.setTitle("InsertBookPage");
	        primaryStage.show();
	}
}
